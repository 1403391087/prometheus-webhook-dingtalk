// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates/default.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "default.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
			uncompressedSize: 2251,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x08\xe7\x12\x0b\x88\xb3\x73\x81\x6d\x28\xd6\xb5\x97\x60\x18\x52\x74\x97\xb5\x68\xd5\x98\x49\xd5\xca\x92\x27\xc9\x69\x0b\x47\xf7\xdd\xf7\x01\xfb\xc5\x7d\xc2\x20\xc9\x71\xad\xc4\xe9\x56\x6c\x3b\xec\xe6\x88\xe4\x23\x1f\x1f\xc9\xd4\x35\xe4\xb8\x60\x02\x21\xb9\xbc\xd4\xd5\xf5\x2d\xce\x4d\x02\xd6\x7e\xae\x6b\xc8\x4e\x0d\x35\x95\x86\x35\x18\x79\x56\x96\xa8\xc0\xda\xba\x06\xb6\x00\xfc\xd2\x1a\x93\x05\x53\x4c\x2c\x5d\xcc\x81\x8b\x39\xe4\xa8\x8c\xce\x8e\xfd\x2b\xac\x81\xa3\x08\x61\x28\x72\xb0\xf6\x02\x9c\xd3\x89\x92\x55\x39\xa5\xd7\xc8\x75\x76\x2a\x95\xc1\xfc\x23\x65\x4a\x67\x9f\x28\xaf\xd0\x25\xbc\x95\x4c\x40\x02\x0e\x15\x42\xca\xa5\x81\x91\xc3\xca\xde\xc9\xa2\x90\x22\x04\xa7\xcd\x5b\x07\x2f\x05\x6b\x47\x75\x0d\xf7\xcc\xdc\xc4\xce\xd9\x0c\x0b\xb9\xc2\x38\xfb\x07\x5a\xa0\x0e\x05\xf6\x66\x6f\x0b\x4f\xdb\xaf\xf6\x63\x10\x35\x8f\x3a\xe2\x05\x15\x74\x89\xea\x6c\x36\x6d\x82\xb3\xf7\x0f\x06\x95\xa0\xfc\x6c\x36\x05\x6b\x27\xc3\x89\xf7\xd3\x6f\x15\xce\x91\xad\x50\xbd\x76\x4e\xb3\xe6\x47\x84\x1e\xc3\x1b\x7c\x30\x21\xc7\x25\x67\xda\x34\xf0\x8a\x8a\x25\x42\xe6\xdc\x09\x09\x94\x08\x19\x3c\x19\x76\x7b\x0c\xd6\xbe\x81\xb1\x57\xc1\x71\x77\xb2\x41\x4b\x1e\xd6\x50\x50\x75\x97\xcb\x7b\x01\x6b\xb8\x31\x05\x6f\x68\x36\x25\x11\x72\x28\x84\x34\xd4\x30\x29\xe2\x44\x9d\xf7\xbf\x98\xed\x54\x56\x6a\x8e\x07\x84\x80\x9f\xc7\x13\x14\xa8\xa8\x91\x2a\x34\xf3\x62\xd4\xf3\x98\x0e\x7a\x84\xea\xb6\x32\xc7\x05\xad\xb8\xc9\x7e\xab\xa5\x7e\x9a\x5d\xfe\x73\x5f\x40\xd3\x4e\x8d\x2b\x54\xcc\x3c\xc2\x1a\xaa\x66\x2f\xce\xc3\x60\x77\xdb\xa0\xab\xa2\xa0\xea\xd1\xe7\x27\xe4\x08\xf5\x5c\xb1\xd2\x99\x1c\xde\xb6\x73\xfe\x64\x6e\x02\x4e\x14\x2d\x6f\x3c\xf5\x1f\xdf\xbf\x7d\xdd\xc3\xd5\x03\x1b\xca\xb8\x3e\xf8\xb5\xee\x61\x91\xa8\xc8\x61\x24\x10\x46\x5e\x91\x14\x92\x0d\x9b\x24\xdd\x7a\x0f\xf5\x27\x69\x9f\x88\x57\xcf\xab\x78\xd5\xa7\x42\xbf\x30\x13\x02\x47\x41\x12\x20\x93\x78\xa9\x36\x52\x19\x66\x38\x36\xf2\x18\x2c\x4a\x4e\x4d\x7c\xaf\xb2\x7d\x6b\xb9\x41\x98\x4b\x61\x50\x78\x89\x87\xc3\xe1\xb0\x91\xf3\x1f\xdc\xb7\xf3\x0b\x20\xc4\x81\x33\x91\xe3\x43\x74\x6b\x20\xf1\xb3\x26\x68\xe1\xb9\x78\x45\xbb\x6c\x76\x0e\x88\x63\x95\x06\x59\xbb\x07\x30\xaa\x20\x85\x57\x30\xb6\x76\xe0\x48\x05\x03\x04\xc3\x20\x42\x7f\x66\xe8\xb7\x18\xf9\xfe\x8d\x3b\xad\xec\x49\x3d\x43\x2d\xf9\x0a\xf3\x9e\xe4\x1b\xd3\x8b\xd3\x6f\x02\x77\x0a\x18\xc7\xb3\x32\xc5\x25\x9d\x3f\xee\x8c\x0a\xf7\xcf\x7f\x30\x29\x0d\xc0\xff\x3e\x28\x5d\xbf\x97\x49\x1d\xda\x7b\x2c\x39\x97\xf7\xce\x2a\xfc\x3f\xe3\x42\x2a\x98\xcb\xa2\xa4\x86\x5d\x33\xee\x6e\xde\xce\x92\x32\xb1\xcc\x38\x13\x77\x7b\x9a\xbf\xb5\xc4\xfb\x57\xb5\xc5\xe9\x68\xd0\x8b\xd4\xda\x63\xac\x9f\x01\x00\x00\xff\xff\xc8\xcb\x94\xc7\xcb\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/default.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

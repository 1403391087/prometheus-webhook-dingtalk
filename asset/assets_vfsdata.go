// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates/default.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "default.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
			uncompressedSize: 2249,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xc1\x6e\xdb\x3c\x0c\xbe\xe7\x29\x08\xe7\x12\x0b\x88\xf3\x9f\x0b\xfc\xff\x8f\x62\x5d\x7b\x09\x86\x21\x45\x77\x59\x8b\x42\xb5\x99\x54\xad\x2c\x79\x92\x9c\xb6\x70\x74\xdf\x7d\x0f\xb0\x57\xdc\x23\x0c\x92\x1c\xd7\x4a\x9c\x6d\x45\xb7\xc3\x6e\x8e\x48\x7e\xe4\xc7\x8f\x64\x9a\x06\x0a\x5c\x32\x81\x90\x5c\x5f\xeb\xfa\xe6\x0e\x73\x93\x80\xb5\x1f\x9b\x06\xb2\x73\x43\x4d\xad\x61\x03\x46\x5e\x54\x15\x2a\xb0\xb6\x69\x80\x2d\x01\x3f\x75\xc6\x64\xc9\x14\x13\x2b\x17\x73\xe4\x62\x8e\x39\x2a\xa3\xb3\x53\xff\x0a\x1b\xe0\x28\x42\x18\x8a\x02\xac\xbd\x02\xe7\x74\xa6\x64\x5d\xcd\xe9\x0d\x72\x9d\x9d\x4b\x65\xb0\x78\x4f\x99\xd2\xd9\x07\xca\x6b\x74\x09\xef\x24\x13\x90\x80\x43\x85\x90\x72\x65\x60\xe2\xb0\xb2\x37\xb2\x2c\xa5\x08\xc1\x69\xfb\xd6\xc3\x4b\xc1\xda\x49\xd3\xc0\x03\x33\xb7\xb1\x73\xb6\xc0\x52\xae\x31\xce\xfe\x8e\x96\xa8\x43\x81\x83\xd9\xbb\xc2\xd3\xee\xab\xfb\x18\x45\xcd\xa3\x8e\x78\x49\x05\x5d\xa1\xba\x58\xcc\xdb\xe0\xec\xed\xa3\x41\x25\x28\xbf\x58\xcc\xc1\xda\xd9\x78\xe6\xfd\xf4\xff\x0a\x73\x64\x6b\x54\xff\x3a\xa7\x45\xfb\x23\x42\x8f\xe1\x0d\x3e\x9a\x90\xe3\x9a\x33\x6d\x5a\x78\x45\xc5\x0a\x21\x73\xee\x84\x04\x4a\x84\x8c\x9e\x0d\xfb\x3d\x06\x6b\xff\x83\xa9\x57\xc1\x71\x77\xb2\x41\x47\x1e\x36\x50\x52\x75\x5f\xc8\x07\x01\x1b\xb8\x35\x25\x6f\x69\xb6\x25\x11\x72\x2c\x84\x34\xd4\x30\x29\xe2\x44\xbd\xf7\xdf\x98\xed\x5c\xd6\x2a\xc7\x23\x42\xc0\xcf\xe3\x19\x0a\x54\xd4\x48\x15\x9a\x79\x35\x19\x78\x4c\x47\x03\x42\xf5\x5b\x59\xe0\x92\xd6\xdc\x64\xbf\xd4\x52\x3f\xcd\x2e\xff\xa5\x2f\xa0\x6d\xa7\xc6\x35\x2a\x66\x9e\x60\x03\x75\xbb\x17\x97\x61\xb0\xfb\x6d\xd0\x75\x59\x52\xf5\xe4\xf3\x13\x72\x82\x3a\x57\xac\x72\x26\x87\xb7\xeb\x5c\x3c\x9b\xdb\x80\x33\x45\xab\x5b\x4f\xfd\xdb\xd7\x2f\x9f\x0f\x70\xf5\xc0\x86\x32\xae\x8f\x7e\xae\x7b\x58\x24\x2a\x0a\x98\x08\x84\x89\x57\x24\x85\x64\xcb\x26\x49\x77\xde\x43\xfd\x49\xfa\x1a\x11\xa3\x65\x19\x90\x65\x46\xe0\x24\x08\x02\x64\x16\xaf\xd4\x56\x28\xc3\x0c\xc7\x56\x1c\x83\x65\xc5\xa9\x89\xaf\x55\x76\x68\x29\xb7\x08\xb9\x14\x06\x85\x17\x78\x3c\x1e\x8f\x5b\x31\xff\xc0\x75\xbb\xbc\x02\x42\x1c\x38\x13\x05\x3e\x46\x97\x06\x12\x3f\x69\x82\x96\x9e\x8b\xd7\xb3\xcf\x66\xef\x7c\x38\x56\x69\x10\xb5\x7f\xfe\xa2\x0a\x52\xf8\x07\xa6\xd6\x8e\x1c\xa9\x60\x80\x60\x18\x45\xe8\x3f\x18\xf9\x1d\x46\xbe\x7f\xd3\x5e\x2b\x07\x52\x2f\x50\x4b\xbe\xc6\x62\x20\xf9\xd6\xf4\xe2\xf4\xdb\xc0\xbd\x02\xa6\xf1\xac\xcc\x71\x45\xf3\xa7\xbd\x51\xe1\xfe\xf9\x15\x93\xd2\x02\xfc\xed\x83\xd2\xf7\x7b\x99\xd4\xa1\xbd\xa7\x92\x73\xf9\xe0\xac\xc2\xff\x2f\x2e\xa5\x82\x5c\x96\x15\x35\xec\x86\x71\x77\xf1\xf6\x96\x94\x89\x55\xc6\x99\xb8\x3f\xd0\xfc\x9d\x25\x3e\xbc\xaa\x1d\x4e\x4f\x83\x41\xa4\xce\x1e\x63\x7d\x0f\x00\x00\xff\xff\x39\xd2\x03\xa6\xc9\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/default.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
		},
		"/templates/default.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "default.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
			uncompressedSize: 2243,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xb1\x6e\xdb\x30\x10\xdd\xfd\x15\x07\x79\xb1\x08\x58\xee\x1c\xa0\x2d\x82\xa6\xc9\x62\x14\x85\x83\x74\x69\x82\x80\x91\xce\x0a\x13\x8a\x54\x49\xca\x89\x21\x6b\xef\xde\x0f\xe8\x2f\xf6\x13\x0a\x92\xb2\x22\xda\x72\xdb\x20\xed\xd0\x4d\xe6\xdd\xbd\xc7\x77\xef\x8e\xae\x6b\xc8\x70\xc9\x04\x42\x74\x7d\xad\xab\x9b\x3b\x4c\x4d\x04\x4d\xf3\xb9\xae\x21\x39\x37\xd4\x54\x1a\x36\x60\xe4\x45\x59\xa2\x82\xa6\xa9\x6b\x60\x4b\xc0\x2f\x5d\x30\x5a\x32\xc5\x44\x6e\x6b\x8e\x6c\xcd\x31\x47\x65\x74\x72\xea\x4e\x61\x03\x1c\x85\x2f\x43\x91\x41\xd3\x5c\x81\x4d\x3a\x53\xb2\x2a\xe7\xf4\x06\xb9\x4e\xce\xa5\x32\x98\x7d\xa4\x4c\xe9\xe4\x13\xe5\x15\x5a\xc2\x3b\xc9\x04\x44\x60\x51\xc1\x53\xe6\x06\x26\x16\x2b\x79\x27\x8b\x42\x0a\x5f\x1c\xb7\x67\x3d\xbc\x18\x9a\x66\x52\xd7\xf0\xc0\xcc\x6d\x98\x9c\x2c\xb0\x90\x2b\x0c\xd9\x3f\xd0\x02\xb5\xbf\xe0\x20\x7b\x77\xf1\xb8\xfb\xea\x3e\x46\x41\xf3\xa8\x15\x5e\x50\x41\x73\x54\x17\x8b\x79\x5b\x9c\xbc\x7f\x34\xa8\x04\xe5\x17\x8b\x39\x34\xcd\x6c\x3c\x73\x79\xfa\xad\xc2\x14\xd9\x0a\xd5\x6b\x9b\xb4\x68\x7f\x04\xe8\x21\xbc\xc1\x47\xe3\x39\xae\x39\xd3\xa6\x85\x57\x54\xe4\x08\x89\x4d\x27\xc4\x4b\x22\x64\xf4\x14\xd8\xef\x31\x34\xcd\x1b\x98\x3a\x17\xac\x76\x6b\x1b\x74\xe2\x61\x03\x05\x55\xf7\x99\x7c\x10\xb0\x81\x5b\x53\xf0\x56\x66\x7b\x25\x42\x8e\x85\x90\x86\x1a\x26\x45\x48\xd4\x3b\xff\x8b\x6c\xe7\xb2\x52\x29\x1e\x11\x02\x6e\x1e\xcf\x50\xa0\xa2\x46\x2a\xdf\xcc\xab\xc9\xc0\x61\x3c\x1a\x30\xaa\xdf\xca\x0c\x97\xb4\xe2\x26\xf9\x83\x96\x8e\xc7\xe3\x31\x5c\x3a\xea\xb6\x91\x1a\x57\xa8\x98\x59\xc3\x06\xaa\x76\x23\x2e\xfd\x48\xf7\x1b\xa0\xab\xa2\xa0\x6a\xed\x98\x09\x39\x41\x9d\x2a\x56\xda\x90\x55\xb2\x9b\x9c\x3d\x85\xdb\x82\x33\x45\xcb\x5b\x27\xfa\xc7\xf7\x6f\x5f\x0f\xa8\x74\xc0\x86\x32\xae\x8f\x7e\xef\xb8\x5f\x21\x2a\x32\x98\x08\x84\x89\xf3\x22\x86\x68\xab\x26\x8a\x77\xce\xfd\xfd\xa3\xf8\x25\xf6\x05\x6b\x32\x60\xc8\x8c\xc0\x89\xb7\x02\xc8\x2c\x5c\xa6\xad\x45\x86\x19\x8e\xad\x2d\x06\x8b\x92\x53\x13\xbe\x53\xc9\xa1\x75\xdc\x22\xa4\x52\x18\x14\xce\xda\x9e\x99\xff\xe0\x5d\xbb\xbc\x02\x42\x2c\x38\x13\x19\x3e\x06\x6f\x0c\x44\x6e\xc6\x04\x2d\x9c\x16\xe7\x67\x5f\xcd\xde\xc3\x61\x55\xc5\xde\xd4\xfe\xc3\x17\xdc\x20\x86\x57\x30\xf5\x23\x0a\x3e\x00\x3e\x30\x0a\xd0\x7f\x31\xec\x3b\x8a\x5c\xff\xa6\xbd\x56\x0e\x50\x2f\x50\x4b\xbe\xc2\x6c\x80\x7c\x1b\x7a\x36\xfd\xb6\x70\xef\x02\xd3\x70\x56\xe6\x98\xd3\x74\xbd\x37\x2a\xdc\x1d\xbf\x60\x52\x5a\x80\xff\x7d\x50\xfa\x79\xcf\xb3\xda\xb7\xf7\x54\x72\x2e\x1f\x6c\x54\xb8\x7f\xc4\xa5\x54\x90\xca\xa2\xa4\x86\xdd\x30\x6e\x5f\xbc\xbd\x25\x65\x22\x4f\x38\x13\xf7\x07\x9a\xbf\xb3\xc4\x87\x57\xb5\xc3\xe9\x79\x30\x88\xd4\xc5\x43\xac\x9f\x01\x00\x00\xff\xff\x71\x3d\x7b\x8b\xc3\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/default.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
